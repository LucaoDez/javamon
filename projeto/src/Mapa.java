//classe que representa o mapa ASCII
public class Mapa{
    private char [][] grid;
    private int jogadorX, jogadorY;

    public Mapa(){
        String[] desenho = {
            "--------------------------------------------------------------------------------",
            "---****---*---*-----------------------------------------------------------------",
            "--------------------------------------------------------------------------------",
            "--**************-**********************-       *******************************--",
            "--***********%**####**##**##**##*##*%*-         ***%****##**##**##**##%***#***--",
            "--**************--**-***-***-***-**--**-       ****-**--**-***-***-***-**-****--",
            "--***********#***%**%%**%***%***%***%**         ***%***%**#%**%#**%***%***#***--",
            "--**************-***********************        *************************-****--",
            "--***********#**************************%      %******************************--",
            "--**************-**********************#      %%*************************-****--",
            "--**********************************#***        #*******              ********--",
            "--**************-*********************-:                              ***-****--",
            "--************##********************#--*                               *#*****--",
            "--**************-*-*-*-*-**********-**-:-**-*-*--*****-*              ***-****--",
            "--***********#*-********************%-********************************#*-*****--",
            "--*************-+*********************-+********************************-+****--",
            "--*************-*********************--*********************************-*****--",
            "--*************--*********************--********************************--****--",
            "--*************--********************---********************************--****--",
            "--*************--*********************--********************************--****--",
            "--*************--***#*****************--********************************--****--",
            "--*************---*-*-*-*-*-****-*--**+*********************************--****--",
            "--************---*#*******************#*#******#                      *---****--",
            "--*************+********#**********************#                      #*--****--",
            "--************--+**********##**#***#***#*******#                      *--+****--",
            "--*************-*******************************                       #*--****--",
            "--*************-+******************************        ****************--+****--",
            "--*************-*#***#******************#*******#*#%#*#*****************-*****--",
            "--*************-+-*-+-*--***************-*------*-+-*-+*****************-+****--",
            "--*****************-***-******************-********#**************************--",
            "--**************-*******************************       ******************-****--",
            "--************##*******************************        *****************#*****--",
            "--**************-******************************#%      ******************-****--",
            "--************%*********#                              ****************# *****--",
            "--**************-********                              ******************-****--",
            "--************#*********#                              ***************** *****--",
            "--**********************#                              ***********************--",
            "--*************%-*******#       #***************************************%*****--",
            "--**********************         *********************************************--",
            "--*************#-*****#*         **********#************#*#*#*#*********#*****--",
            "--***************-*--****---****-*--****-*-*-*-*-**-*-*-*-*-*-*-*-*-**********--",
            "--*************#-*******                                              **#*****--",
            "--***********#*-*#******                                               ***#***--",
            "--**************-***#***                                              ********--",
            "--***********%***#******                                               ***#***--",
            "--**************-**********************************************       ***-****--",
            "--***********#***#***#******#***#***#***#***#******************        *******--",
            "--**************--*-+-*------*-+-*-+-*-+-*-+----*************************-****--",
            "--*****************-***-**********-***-***-***************************#*******--",
            "--**************-**********************************************       ***-****--",
            "--************##***********************************************       ###*****--",
            "--**************-**********************************************       ***-****--",
            "--************                                                        ********--",
            "--**************-                                                     ***-****--",
            "--************                      ****                              *  *****--",
            "--***************--*-*-**           ***--**-*-*--*****---*-*-*--**************--",
            "--*************--***********************        ************************--****--",
            "--*************--***********************        ************************--****--",
            "--*************--***********************        ************************--****--",
            "--*************--*#*********************        #***********************--****--",
            "--************---***********************        ***********************---****--",
            "--*************+*********************#**        ***************#********--****--",
            "--***********----******************#***#        *****************##****--+***#--",
            "--*************+*****************##**##*        ***************#***#***--****--",
            "--************--+-**-***-***-***-**--**-***********-**--**-***-***-***---+****--",
            "--*************-*#**%%**%***%***%***%**************#***%**#%**%#**%***#*-*****--",
            "--*************-+*#********************-********************************-+****--",
            "--***********#*-********************************************************-*****--",
            "--*************-+**********************-********************************-+****--",
            "--***********#*-*********************#********************************#*-*****--",
            "--*************-:**********************-********************************-+****--",
            "--------------------------------------------------------------------------------",
            "--------------------------------------------------------------------------------",
    
        };
           int altura = desenho.length;
        int largura = desenho[0].length();
        grid = new char[altura][largura];

        for (int y = 0; y < altura; y++) {
            for (int x = 0; x < largura; x++) {
                grid[y][x] = desenho[y].charAt(x);
            }
        }

        // posição inicial do jogador (na frente da casa)
        jogadorX = 10;
        jogadorY = desenho.length - 3;
    }

    // Mostra o mapa no terminal
    public void mostrarMapa() {
        for (int y = 0; y < grid.length; y++) {
            for (int x = 0; x < grid[y].length; x++) {
                if (y == jogadorY && x == jogadorX) {
                    System.out.print("@"); // Jogador
                } else {
                    System.out.print(grid[y][x]);
                }
            }
            System.out.println();
        }
    }

    // Movimento do jogador
    public void mover(char direcao, Jogador jogador) {
        int novoX = jogadorX, novoY = jogadorY;
        if (direcao == 'w') novoY--;
        else if (direcao == 's') novoY++;
        else if (direcao == 'a') novoX--;
        else if (direcao == 'd') novoX++;

        if (novoX >= 0 && novoX < grid[0].length && novoY >= 0 && novoY < grid.length) {
            char destino = grid[novoY][novoX];
            if (destino != '-') { // não atravessa árvores
                jogadorX = novoX;
                jogadorY = novoY;
            }
        }
    }
}